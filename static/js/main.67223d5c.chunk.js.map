{"version":3,"sources":["components/three/Clock.js","components/three/Renderer.js","components/three/BloomPass.js","components/three/Scene.js","components/three/Camera.js","components/three/Cube.js","components/three/PixelationPass.js","components/three/Sphere.js","components/Resize.js","components/Experiment.js","serviceWorker.js","index.js","App.js"],"names":["Clock","clock","TClock","state","elapsedTime","delta","onFrame","_this","setState","getElapsedTime","getDelta","window","requestAnimationFrame","this","cancelAnimationFrame","render","props","children","Object","objectSpread","Component","Context","React","createContext","setScene","setCamera","Renderer","frame","canvas","createRef","passes","scene","camera","addPass","pass","push","update","_ref","composer","renderer","TWebGLRenderer","current","_this$props","width","height","setSize","setPixelRatio","devicePixelRatio","EffectComposer","renderPass","RenderPass","renderToScreen","length","effect","construct","EffectPass","concat","toConsumableArray","_this$props2","react_default","a","createElement","Provider","value","Clock_Clock","ref","defaultProps","onTick","BloomPass","context","BloomEffect","contextType","addToScene","Scene","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","element","add","TScene","Scene_Context","RendererContext","Camera","fov","aspect","near","far","TPerspectiveCamera","position","key","updateProjectionMatrix","PureComponent","x","y","z","rotation","three_Camera","Consumer","_ref2","Camera_Camera","assign","Cube","size","geometry","BoxGeometry","material","MeshNormalMaterial","mesh","Mesh","PixelationPass","PixelationEffect","granularity","setGranularity","radius","widthSegments","heightSegments","SphereBufferGeometry","Resize","innerWidth","innerHeight","onResize","addEventListener","removeEventListener","_this$state","M_2_PI","Math","PI","Experiment","Resize_Resize","Renderer_Renderer","three_BloomPass","three_PixelationPass","Scene_Scene","Fragment","Cube_Cube","cos","sin","tan","Boolean","location","hostname","match","ReactDOM","react","className","href","target","rel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67223d5c.chunk.js","sourcesContent":["import { Clock as TClock } from 'three'\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Clock extends Component {\n  static propTypes = {\n    children: PropTypes.func\n  }\n\n  clock = new TClock()\n\n  state = {\n    elapsedTime: 0,\n    delta: 0\n  }\n\n  componentDidMount () {\n    window.requestAnimationFrame(this.onFrame)\n  }\n\n  componentWillUnmount () {\n    window.cancelAnimationFrame(this.onFrame)\n  }\n\n  onFrame = () => {\n    this.setState({\n      elapsedTime: this.clock.getElapsedTime(),\n      delta: this.clock.getDelta()\n    })\n\n    window.requestAnimationFrame(this.onFrame)\n  }\n\n  render () {\n    const { children: render } = this.props\n\n    return render({ ...this.state })\n  }\n}\n","import { WebGLRenderer as TWebGLRenderer } from 'three'\nimport { EffectComposer, RenderPass, EffectPass } from 'postprocessing'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Clock from './Clock'\n\nexport const Context = React.createContext({\n  setScene: () => {},\n  setCamera: () => {}\n})\n\nexport default class Renderer extends Component {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    children: PropTypes.element\n  }\n\n  static defaultProps = {\n    onTick: () => {}\n  }\n\n  frame = 0\n  canvas = React.createRef()\n  passes = []\n\n  componentDidMount () {\n    this.renderer = new TWebGLRenderer({\n      canvas: this.canvas.current\n    })\n\n    const { width, height } = this.props\n    this.renderer.setSize(width, height)\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n    this.composer = new EffectComposer(this.renderer)\n\n    const renderPass = new RenderPass(this.scene, this.camera)\n    this.composer.addPass(renderPass)\n    renderPass.renderToScreen = true\n\n    if (this.passes.length) {\n      renderPass.renderToScreen = false\n      const effect = new EffectPass(this.camera, ...this.passes)\n      effect.renderToScreen = true\n      this.composer.addPass(effect)\n    }\n  }\n\n  setScene = scene => (this.scene = scene)\n\n  setCamera = camera => (this.camera = camera)\n\n  addPass = pass => {\n    this.passes.push(pass)\n  }\n\n  update = ({ delta }) => {\n    if (this.composer) {\n      this.composer.render(delta)\n    }\n\n    return null\n  }\n\n  render () {\n    const { width, height, children } = this.props\n\n    if (this.renderer) {\n      this.renderer.setSize(width, height)\n      this.renderer.setPixelRatio(window.devicePixelRatio)\n    }\n\n    return (\n      <Context.Provider\n        value={{\n          addPass: this.addPass,\n          setScene: this.setScene,\n          setCamera: this.setCamera\n        }}\n      >\n        <Clock children={this.update} />\n        <canvas ref={this.canvas} />\n        {children}\n      </Context.Provider>\n    )\n  }\n}\n","import { Component } from 'react'\nimport { BloomEffect } from 'postprocessing'\n\nimport { Context } from './Renderer'\n\nclass BloomPass extends Component {\n  static contextType = Context\n\n  componentDidMount () {\n    this.context.addPass(new BloomEffect())\n  }\n\n  render () {\n    return this.props.children\n  }\n}\n\nexport default BloomPass\n","import { Scene as TScene } from 'three'\nimport React, { Component } from 'react'\n\nimport { Context as RendererContext } from './Renderer'\nexport const Context = React.createContext({ addToScene: () => {} })\n\nexport default class Scene extends Component {\n  static contextType = RendererContext\n\n  constructor (props) {\n    super(props)\n\n    this.scene = new TScene()\n  }\n\n  componentDidMount () {\n    this.context.setScene(this.scene)\n  }\n\n  addToScene = element => this.scene.add(element)\n\n  render () {\n    const { children } = this.props\n\n    return (\n      <Context.Provider value={{ addToScene: this.addToScene }}>\n        {children}\n      </Context.Provider>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { PerspectiveCamera as TPerspectiveCamera } from 'three'\n\nimport { Context as RendererContext } from './Renderer'\nimport { Context as SceneContext } from './Scene'\n\nclass Camera extends PureComponent {\n  static propTypes = {\n    setCamera: PropTypes.func,\n    addToScene: PropTypes.func,\n    fov: PropTypes.number, // Camera frustum vertical field of view.\n    aspect: PropTypes.number, // Camera frustum aspect ratio.\n    near: PropTypes.number, // Camera frustum near plane.\n    far: PropTypes.number, // Camera frustum far plane.\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    }),\n    rotation: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    })\n  }\n\n  static defaultProps = {\n    position: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    rotation: {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  }\n\n  constructor (props) {\n    super(props)\n\n    const { fov, aspect, near, far } = props\n    this.camera = new TPerspectiveCamera(fov, aspect, near, far)\n  }\n\n  componentDidMount () {\n    this.props.setCamera(this.camera)\n    this.props.addToScene(this.camera)\n  }\n\n  render () {\n    // const { aspect, position, rotation } = this.props\n    const { aspect, position } = this.props\n\n    this.camera.aspect = aspect\n    this.camera.updateProjectionMatrix()\n\n    for (const key in position) {\n      this.camera.position[key] = position[key]\n    }\n\n    // for (const key in rotation) {\n    //   this.camera.rotation[key] = rotation[key]\n    // }\n\n    return null\n  }\n}\n\nexport default props => (\n  <RendererContext.Consumer>\n    {({ setCamera }) => (\n      <SceneContext.Consumer>\n        {({ addToScene }) => (\n          <Camera {...props} setCamera={setCamera} addToScene={addToScene} />\n        )}\n      </SceneContext.Consumer>\n    )}\n  </RendererContext.Consumer>\n)\n","import { BoxGeometry, MeshNormalMaterial, Mesh } from 'three'\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Context } from './Scene'\n\nexport default class Cube extends Component {\n  static contextType = Context\n\n  static propTypes = {\n    size: PropTypes.number,\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    }),\n    rotation: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    })\n  }\n\n  static defaultProps = {\n    position: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    rotation: {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  }\n\n  constructor (props) {\n    super(props)\n\n    const { size } = props\n    const geometry = new BoxGeometry(size, size, size)\n    const material = new MeshNormalMaterial()\n    this.mesh = new Mesh(geometry, material)\n  }\n\n  componentDidMount () {\n    this.context.addToScene(this.mesh)\n  }\n\n  render () {\n    const { position, rotation } = this.props\n\n    for (const key in position) {\n      this.mesh.position[key] = position[key]\n    }\n\n    for (const key in rotation) {\n      this.mesh.rotation[key] = rotation[key]\n    }\n\n    return null\n  }\n}\n","import { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { PixelationEffect } from 'postprocessing'\n\nimport { Context } from './Renderer'\n\nclass PixelationPass extends Component {\n  static contextType = Context\n\n  static propTypes = {\n    granularity: PropTypes.number\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.effect = new PixelationEffect(props.granularity)\n  }\n\n  componentDidMount () {\n    this.context.addPass(this.effect)\n  }\n\n  render () {\n    this.effect.setGranularity(this.props.granularity)\n\n    return this.props.children\n  }\n}\n\nexport default PixelationPass\n","import { SphereBufferGeometry, MeshNormalMaterial, Mesh } from 'three'\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Context } from './Scene'\n\nexport default class Cube extends Component {\n  static contextType = Context\n\n  static propTypes = {\n    radius: PropTypes.number,\n    widthSegments: PropTypes.number,\n    heightSegments: PropTypes.number,\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    }),\n    rotation: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.number\n    })\n  }\n\n  static defaultProps = {\n    widthSegments: 32,\n    heightSegments: 32,\n    position: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    rotation: {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  }\n\n  constructor (props) {\n    super(props)\n\n    const { radius, widthSegments, heightSegments } = props\n    const geometry = new SphereBufferGeometry(\n      radius,\n      widthSegments,\n      heightSegments\n    )\n    const material = new MeshNormalMaterial()\n    this.mesh = new Mesh(geometry, material)\n  }\n\n  componentDidMount () {\n    this.context.addToScene(this.mesh)\n  }\n\n  render () {\n    const { position, rotation } = this.props\n\n    for (const key in position) {\n      this.mesh.position[key] = position[key]\n    }\n\n    for (const key in rotation) {\n      this.mesh.rotation[key] = rotation[key]\n    }\n\n    return null\n  }\n}\n","import { Component } from 'react'\n\nexport default class Resize extends Component {\n  state = {\n    width: window.innerWidth,\n    height: window.innerHeight\n  }\n\n  constructor () {\n    super()\n    window.addEventListener('resize', this.onResize)\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  onResize = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n  }\n\n  render () {\n    const { width, height } = this.state\n    const { children: render } = this.props\n\n    return render({ width, height })\n  }\n}\n","import React from 'react'\n\nimport {\n  Clock,\n  Renderer,\n  BloomPass,\n  PixelationPass,\n  Camera,\n  Scene,\n  Cube\n} from './three'\n\nimport Resize from './Resize'\n\nconst M_2_PI = Math.PI * 2\nexport default () => (\n  <Resize>\n    {({ width, height }) => (\n      <Renderer width={width} height={height}>\n        <BloomPass>\n          <PixelationPass granularity={20.0}>\n            <Scene>\n              <Camera\n                fov={75}\n                aspect={width / height}\n                near={0.1}\n                far={2000}\n                position={{\n                  z: 600\n                }}\n              />\n              <Clock>\n                {({ elapsedTime }) => (\n                  <React.Fragment>\n                    {/* <p className='debug'>time: {elapsedTime}</p> */}\n                    <Cube\n                      size={200}\n                      rotation={{\n                        x: Math.cos(elapsedTime / 2) * M_2_PI,\n                        y: Math.sin(elapsedTime / 2) * M_2_PI,\n                        z: Math.tan(elapsedTime / 2) * M_2_PI\n                      }}\n                    />\n                  </React.Fragment>\n                )}\n              </Clock>\n            </Scene>\n          </PixelationPass>\n        </BloomPass>\n      </Renderer>\n    )}\n  </Resize>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { Fragment } from 'react'\n\nimport Experiment from './components/Experiment'\n\nexport default () => (\n  <Fragment>\n    <Experiment />\n    <div className='infos'>\n      <p>\n        The only purpose of this demo is to experiment manipulating WebGL through JSX.\n        <br />\n        Check out sources on\n        {' '}\n        <a href='https://github.com/alextoudic/react-threejs'>GitHub</a>.\n      </p>\n      <a\n        className='twitter'\n        href='https://twitter.com/alextoudic'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        @alextoudic\n      </a>\n    </div>\n  </Fragment>\n)\n"],"sourceRoot":""}